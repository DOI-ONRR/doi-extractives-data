(function(exports) {
  'use strict';

  /**
   * Utilities for setting or removing tabindex on all focusable elements
   * in a parent div. Useful for hiding elements off-canvas without setting
   * display:none, while still removing from the tab order
   */
  var accessibility = {
    removeTabindex: function removeTabindex($elm) {
      $elm
        .find('a, button, :input, [tabindex]')
        .attr('tabindex', '-1');
    },
    restoreTabindex: function restoreTabindex($elm) {
      $elm
        .find('a, button, :input, [tabindex]')
        .attr('tabindex', '0');
    }
  };

  var KEYCODE_ESC = 27;

  var defaultSelectors = {
    body: '#glossary',
    toggle: '.js-glossary-toggle',
    term: '.term',
    navToggle: '[data-toggler="nav-drawer"]',
    navDrawer: '#nav-drawer'
  };

  /**
   * Glossary widget
   * @constructor
   * @param {Array} terms - Term objects with
   * "glossary-term" and "glossary-definition" keys
   * @param {Object} selectors - CSS selectors for glossary components
   */
  exports.Glossary = function Glossary(selectors) {
    var self = this;

    self.selectors = $.extend({}, defaultSelectors, selectors);

    self.$body = $(self.selectors.body);
    self.$toggle = $(self.selectors.toggle);
    self.$search = this.$body.find('.js-glossary-search');
    self.$navToggle =  document.querySelector(self.selectors.navToggle);
    self.$navDrawer = $(self.selectors.navDrawer);

    // Initialize state
    self.isOpen = false;

    // Update DOM
    self.connectList();
    self.linkTerms();

    // Remove tabindices
    accessibility.removeTabindex(self.$body);

    // Bind listeners
    self.$toggle.on('click', this.toggle.bind(this));
    self.$body.on('click', '.toggle', this.toggle.bind(this));
    self.$body.on('click', '.glossary-term', this.toggleTermFromClick.bind(this) );
    self.$search.on('input', this.handleInput.bind(this));

    $(document.body).on('keyup', this.handleKeyup.bind(this));

    $(document).click(function(event) {
      var $target = $(event.target);

      var hitsTriggers = $target.hasClass('js-glossary-toggle')
        || $target.hasClass('term')
        || $target.hasClass('icon-bars')
        || $target.hasClass('drawer-search_button')
        || $target.hasClass('drawer-search_field');

      if (!hitsTriggers) {
        self.hide();
      }
    });

    self.$body.on('click', function(event){
      event.stopPropagation();
    });
  };

  exports.Glossary.prototype = {

    isMobile: function() {
      var windowWidth = window.innerWidth || document.body.clientWidth;
      return windowWidth < 768;
    },

    /** Create list.js for list staticly generated by jekyll */
    connectList: function() {
      var options = {
        valueNames: ['glossary-term'],
        listClass: 'js-glossary-list',
        searchClass: 'js-glossary-search'
      };
      this.list = new List('glossary', options);
    },

    /** Add links to terms in body */
    linkTerms: function() {
      var self = this;
      var $terms = $(self.selectors.term);
      $terms.each(function(){
        var $term = $(this);
        $term.attr('title', 'Click to define')
          .attr('tabindex', 0)
          .data('term', $term.data('term').toLowerCase());
      });
      $terms.on('click keypress', function(e) {
        if (e.which === 13 || e.type === 'click') {
          self.show();
          self.findTerm($(this).data('term'));
        }
      });
    },

    /** Highlight a term */
    findTerm: function(term) {
      this.$search.val(term);

      // Highlight the term and remove other highlights
      this.$body.find('.term--highlight').removeClass('term--highlight');
      this.$body.find('span[data-term="' + term + '"]').addClass('term--highlight');
      this.list.filter(function(item) {
        return item._values['glossary-term'].toLowerCase() === term;
      });

      // Hack: Expand text for selected item
      this.list.search();

      this.list.visibleItems.forEach(function(item){
        var $elm = $(item.elm);
        $elm.attr('aria-expanded', true);
      });
    },

    toggle: function() {
      var method = this.isOpen ? this.hide : this.show;
      method.apply(this);
    },

    toggleTermFromClick: function(event){
      var $target = $(event.target);
      var doExpand = $target.parent().attr( 'aria-expanded') === 'true' ? 'false' : 'true';

      $target
        .siblings( 'p' )
        .attr('aria-hidden', doExpand )
        .parent()
        .attr('aria-expanded', doExpand );
    },

    show: function() {
      this.$body.addClass('is-open').attr('aria-hidden', 'false');
      this.$toggle.addClass('active');
      if (!this.isMobile()) {
        this.$search.focus();
      }
      this.isOpen = true;
      accessibility.restoreTabindex(this.$body);
    },

    hide: function() {
      this.$body.removeClass('is-open').attr('aria-hidden', 'true');
      this.$toggle.removeClass('active');
      this.isOpen = false;
      accessibility.removeTabindex(this.$body);

      if (this.$navDrawer.attr('aria-hidden') == 'false') {
        this.$navToggle.click();
      }
    },

    /** Remove existing filters on input */
    handleInput: function() {
      if (this.list.filtered) {
        this.list.filter();
      }
    },

    /** Close glossary on escape keypress */
    handleKeyup: function(e) {
      if (e.keyCode == KEYCODE_ESC) {
        if (this.isOpen) {
          this.hide();
        }
      }
    }
  };

  module.exports = exports.Glossary;

})(this);
