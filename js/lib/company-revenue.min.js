/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 39);
/******/ })
/************************************************************************/
/******/ ({

/***/ 32:
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./js/pages/company-revenue.js ***!
  \*************************************/
/***/ (function(module, exports) {

/* global d3, eiti */
(function() {
  'use strict';

  var root = d3.select('#companies');
  var revenueTypeList = root.select('#revenue-types');
  var companyList = root.select('#companies');

  var WITHHELD = 'Withheld';

  var getter = eiti.data.getter;
  var grouper;
  var formatDollars = eiti.format('$,.0f');
  var formatNumber = function(n) {
    return n === WITHHELD ? n : formatDollars(n);
  };
  var REVENUE_TYPE_PREFIX = /^[A-Z]+(\/[A-Z]+)?\s+-\s+/;

  var sumRevenue = function(data) {
    var withheld = 0;
    return d3.sum(data, function(d) {
      if (d.Revenue === WITHHELD) {
        withheld++;
        return 0;
      }
      return d.Revenue;
    }) || (withheld === data.length ? WITHHELD : 0);
  };

  var state = eiti.explore.stateManager()
    .on('change', update);

  var hash = eiti.explore.hash()
    .on('change', state.merge);

  // buttons that expand and collapse other elements
  var filterToggle = root.select('button.toggle-filters');

  // FIXME: componentize these too
  var filterParts = root.selectAll('a[data-key]');
  filterParts.on('click', function(e, index) {
    var key = filterParts[0][index].getAttribute('data-key');
    if (key) {
      root.select('.filters-wrapper').attr('aria-expanded', true);
      filterToggle.attr('aria-expanded', true);
      root.select('.filter-description_closed').attr('aria-expanded', true);
      document.querySelector('#'+ key + '-selector').focus();
    }
    d3.event.preventDefault();
  });

  var year = root.attr('data-year');
  if (!year) {
    throw new Error('No year found in', root.node());
  }
  var dataUrl = '../../../data/company-revenue/output/' + year + '.tsv';

  var model = eiti.explore.model(dataUrl)
    .transform(removeRevenueTypePrefix)
    .filter('commodity', function(data, commodity) {
      return data.filter(function(d) {
        return d.Commodity === commodity;
      });
    })
    .filter('type', function(data, type) {
      return data.filter(function(d) {
        return d.revenueType === type;
      });
    })
    .on('prefilter', function(key, data) {
      if (key === 'commodity') {
        updateCommoditySelector(data);
        updateRevenueTypeSelector(data);
      }
    });

  var filters = root.selectAll('.filters [name]')
    .on('change', filterChange);

  var search = root.select('#company-name-filter')
    .on('keyup', updateNameSearch)
    .on('clear', filterChange)
    .on('change', filterChange);

  var initialState = hash.read();
  var innerKey = 'revenueType';

  var withheldComparator = function(key) {
    var get = getter(key);
    return function(a, b) {
      var aa = get(a);
      var bb = get(b);
      if (aa === WITHHELD) {
        return 1;
      } else if (bb === WITHHELD) {
        return -1;
      }
      return d3.descending(+aa, +bb);
    };
  };

  state.init(initialState);

  function update(state) {
    var query = state.toJS();
    hash.write(query);

    updateFilterDescription(state);

    grouper = d3.nest()
      .rollup(sumRevenue)
      .sortValues(withheldComparator('Revenue'));

    var hasCommodity = !!query.commodity;
    var hasType = !!query.type;
    if (hasType && !hasCommodity) {
      innerKey = 'Commodity';
    } else {
      innerKey = 'revenueType';
    }
    grouper.key(getter(innerKey));

    model.load(state, function(error, data) {
      if (error) {
        // console.error('error:', error);
        data = [];
      }

      filters.each(function() {
        this.value = state.get(this.name) || '';
      });

      search.property('value', state.get('search') || '');
      render(data);
    });
  }

  function render(data) {
    // console.log('rendering %d rows', data.length, data[0]);
    updateRevenueTypes(data);
    updateCompanyList(data);
    updateNameSearch();
  }

  function updateCommoditySelector(data) {
    var commodities = d3.nest()
      .key(getter('Commodity'))
      .entries(data)
      .map(getter('key'))
      .sort(d3.ascending);
    var input = root.select('#commodity-selector');
    var options = input.selectAll('option.value')
      .data(commodities, identity);
    options.enter().append('option')
      .attr('class', 'value')
      .attr('value', identity)
      .text(identity);
  }

  function updateRevenueTypeSelector(data) {
    var commodities = d3.nest()
      .key(getter('revenueType'))
      .entries(data)
      .map(getter('key'))
      .sort(d3.ascending);
    var input = root.select('#type-selector');
    var options = input.selectAll('option.value')
      .data(commodities, identity);
    options.enter().append('option')
      .attr('class', 'value')
      .attr('value', identity)
      .text(identity);
  }

  function updateRevenueTypes(data) {
    var types = grouper.entries(data)
      .map(function(d) {
        return {
          name: d.key,
          value: d.values
        };
      });

    var extent = d3.extent(types, getter('value'));
    revenueTypeList.call(renderSubtypes, types, extent);
  }

  function updateCompanyList(data) {
    var companies = d3.nest()
      .key(getter('Company'))
      .entries(data)
      .map(function(d) {
        var total = sumRevenue(d.values);
        return {
          name: d.key,
          total: total,
          types: grouper.entries(d.values)
            .map(function(d) {
              return {
                name: d.key,
                value: d.values
              };
            })
        };
      });

    var items = companyList.selectAll('tbody.company')
      .data(companies, getter('name'));

    items.exit().remove();

    var enter = items.enter().append('tbody')
      .attr('class', 'company subgroup')
      .append('tr')
        .attr('class', 'name');
    enter.append('td')
      .attr('class', 'subregion-name')
      .text(getter('name'));
    enter.append('td')
      .attr('class', 'subtotal value');
    enter.append('td')
      .attr('class', 'subtotal-label');

    items.sort(function(a, b) {
      return d3.descending(a.total, b.total);
    });

    items.select('.subtotal-label')
      .text(function(d) {
        return d.types.length > 1 ? 'total' : '';
      });

    items.select('.subtotal')
      .text(function(d) {
        return d.types.length > 1 ? formatNumber(d.total) : '';
      });

    var extent = d3.extent(companies, getter('total'));
    items.call(renderSubtypes, getter('types'), extent);
  }

  function renderSubtypes(selection, types, extent) {
    var items = selection.selectAll('.subtype')
      .data(types, getter('name'));

    items.exit().remove();
    items.enter().append('tr')
      .attr('class', 'subtype')
      .call(setupRevenueItem);

    items
      .call(updateRevenueItem, extent)

    selection.each(function() {
      d3.select(this)
        .selectAll('tr.subtype')
          .sort(withheldComparator('value'));
    });
  }

  function updateNameSearch() {
    var query = search.property('value').toLowerCase();
    var items = companyList.selectAll('.company');
    if (query) {
      items
        .style('display', function(d) {
          d.index = d.name.toLowerCase().indexOf(query)
          return d.index > -1 ? null : 'none';
        })
        .filter(function(d) {
          return d.index > -1;
        })
        .select('.subregion-name')
          .html(function(d) {
            var name = d.name;
            var start = d.index;
            var end = d.index + query.length;
            return [
              name.substr(0, start),
              '<span class="hilite">',
              name.substr(start, query.length),
              '</span>',
              name.substr(end)
            ].join('');
          });
    } else {
      items
        .style('display', null)
        .select('.subregion-name')
          .text(getter('name'));
    }
  }

  function setupRevenueItem(selection) {
    selection.append('td')
      .attr('class', 'name');
    selection.append('td')
      .attr('class', 'value');
    selection.append('td')
      .attr('class', 'bar')
      .append('eiti-bar');
  }

  function updateRevenueItem(selection, extent) {
    selection.select('.name')
      .text(getter('name'));

    selection.select('.value')
      .text(function(d) {
        return formatNumber(d.value);
      });

    var bar = selection.select('eiti-bar')
      .attr('value', getter('value'));

    if (extent) {
      bar
        .attr('min', Math.min(0, extent[0]))
        .attr('max', extent[1]);
    }
  }

  function updateFilterDescription(state) {
    var desc = root.selectAll('[data-filter-description]');

    var data = {
      type: state.get('type') || 'All revenue',
      commodity: (state.get('commodity') || 'all resource').toLowerCase(),
    };

    /*
    if (data.commodity === 'N/A') {
      data.commodity = 'no applicable';
    }
    */

    desc.selectAll('[data-key]')
      .text(function() {
        return data[this.getAttribute('data-key')];
      });
  }

  function removeRevenueTypePrefix(row) {
    if (!row.revenueType) {
      row.revenueType = row['Revenue Type'].replace(REVENUE_TYPE_PREFIX, '');
    }
  }

  function filterChange() {
    state.set(this.name, this.value);
  }

  function identity(d) {
    return d;
  }

})(this);


/***/ }),

/***/ 39:
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** ./js/src/company-revenue.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./../eiti.explore.js */ 8);
__webpack_require__(/*! ./../pages/company-revenue.js */ 32);


/***/ }),

/***/ 8:
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./js/eiti.explore.js ***!
  \****************************/
/***/ (function(module, exports) {

/* global d3, eiti, Immutable */
(function(eiti) {
  'use strict';

  eiti.explore = {};

  /**
   * @class stateManager
   * The state manager helps you manage application state, using an
   * Immutable.Map under the hood.
   *
   * @example
   * var manager = eiti.explore.stateManager()
   *   .on('change', function(state) {
   *   })
   *   .set('foo', 'bar');
   */
  eiti.explore.stateManager = function() {

    var state = new Immutable.Map();
    var updated = false;

    var manager = {};
    var dispatch = d3.dispatch('change');

    // the default state validator is a noop
    var validateState = function(state) {
      return state;
    };

    /**
     * Raw state mutation with a function, which should take an
     * Immutable.Map and return either the same one or a mutated
     * instance:
     *
     * @example
     * manager.mutate(function(state) {
     *   return state.set('x', 1);
     * });
     *
     * @param Function mutator
     */
    manager.mutate = function(fn) {
      mutateState(fn);
      return manager;
    };

    /**
     * set a single key
     * @param String key
     * @param {*} value
     */
    manager.set = function(key, value) {
      mutateState(function(state) {
        return state.set(key, value);
      });
      return manager;
    };

    /**
     * merge the keys of the provided object
     * @param Object keys
     */
    manager.merge = function(keys) {
      mergeState(keys);
      return manager;
    };

    /**
     * Provide a validation function for your state before 'change'
     * events are updated. This should return an Immutable.Map, e.g.
     *
     * @example
     * manager.validate(function(state) {
     *   if (!state.has('foo')) {
     *     return state.set('foo', 'default foo');
     *   }
     *   return state;
     * });
     *
     * @param Function validator
     */
    manager.validate = function(validator) {
      validateState = validator;
      return manager;
    };

    /**
     * Initialize the manager state with an optional Object literal.
     *
     * @param {Object}? initial
     */
    manager.init = function(initial) {
      var previous = state;
      if (initial) {
        // eslint-disable-next-line no-unused-expressions
        mergeState(initial) || update(state, previous);
      } else {
        update(state, null);
      }
      return manager;
    };

    function update(state, previous) {
      dispatch.change(state, previous, updated);
      updated = true;
    }

    // mutate the state and update if the state has changed
    function mutateState(fn) {
      var previous = state;
      state = fn(state) || new Immutable.Map();
      if (!Immutable.is(state, previous)) {
        state = validateState(state, previous, updated);
        update(state, previous);
        return true;
      }
      return false;
    }

    function mergeState(keys) {
      return mutateState(function(state) {
        return state.merge(keys);
      });
    }

    return d3.rebind(manager, dispatch, 'on');
  };

  eiti.explore.hash = function() {
    var dispatch = d3.dispatch('change');

    var hash = {};
    var writing = false;

    hash.read = function() {
      if (!location.hash) {
        return {};
      }
      var str = location.hash.substr(1);
      return eiti.url.qs.parse(str);
    };

    hash.write = function(data) {
      writing = true;
      location.hash = data ? eiti.url.qs.format(data) : '';
      writing = false;
    };

    function change(e) { // eslint-disable-line no-unused-vars
      if (writing) {
        return;
      }
      dispatch.change(hash.read());
    }

    window.addEventListener('hashchange', change);

    return d3.rebind(hash, dispatch, 'on');
  };

  eiti.explore.model = function(url) {
    var model = {};
    var dispatch = d3.dispatch('prefilter', 'postfilter');
    var getDataURL = d3.functor(url);
    var transform;
    var req;

    var filters = [];

    model.load = function(state, done) {
      if (req) {
        req.abort();
      }
      var url = getDataURL(state);
      // console.log('model.load():', url);
      req = eiti.load(url, function(error, data) {
        if (error) {
          data = [];
        }
        if (transform) {
          data.forEach(transform);
        }
        applyFilters(data, state, done);
      });
      return req;
    };

    model.filter = function(stateKey, filter) {
      filters.push({
        key: stateKey,
        func: filter
      });
      return model;
    };

    model.transform = function(fn) {
      if (arguments.length) {
        transform = fn;
        return model;
      }
      return transform;
    };

    function applyFilters(data, state, done) {
      filters.forEach(function(filter) {
        var value = state.get(filter.key);
        dispatch.prefilter(filter.key, data);
        if (value || value === 0) { // XXX
          data = filter.func(data, value, filter.key);
          dispatch.postfilter(filter.key, data);
        }
      });

      done(null, data);
    }

    return d3.rebind(model, dispatch, 'on');
  };


  eiti.explore.timeline = function() {
    var getter = eiti.data.getter;
    var value = getter('value');
    var aggregate;

    var years = [];
    var selected;

    var timeline = function(selection, data) {
      var rollup = aggregate || function(d) {
        return d3.sum(d, value);
      };

      var dataByYearPolarity = d3.nest()
        .key(function(d) {
          return value(d) < 0 ? 'negative' : 'positive';
        })
        .key(getter('Year'))
        .rollup(rollup)
        .map(data);

      // console.log('data by year/polarity:', dataByYearPolarity);
      var positiveYears = dataByYearPolarity.positive || {};
      var positiveExtent = d3.extent(d3.values(positiveYears));
      var negativeYears = dataByYearPolarity.negative || {};
      var negativeExtent = d3.extent(d3.values(negativeYears));

      var w = 500;
      var h = 40;
      var viewBox = selection.attr('viewBox');
      // if there is a viewBox already, derive the dimensions from it
      if (viewBox) {
        viewBox = viewBox.split(' ').map(Number);
        w = viewBox[2];
        h = viewBox[3];
      } else {
        // otherwise, set up the viewBox with our default dimensions
        selection.attr('viewBox', [0, 0, w, h].join(' '));
      }

      var left = 0; // XXX need to make room for axis labels
      var right = w;

      // the x-axis scale
      var x = d3.scale.linear()
        .domain(d3.extent(years))
        .range([left, right + 2]);

      // the y-axis domain sets a specific point for zero.
      // the `|| -100` and `|| 100` bits here ensure that the domain has some
      // size, even if there is no data from which to derive an extent.
      var yDomain = [
        negativeExtent[0] || 0,
        positiveExtent[1] || 100
      ];
      // the y-axis scale, with the zero point at 3/4 the height
      // XXX: note that this exaggerates the negative scale!
      var y = d3.scale.linear()
        .domain(yDomain)
        .range([h, 0]);

      var area = d3.svg.area()
        .interpolate('step-after')
        .x(function(d) {
          return x(d.year);
        })
        .y0(y(0))
        .y1(function(d) {
          return y(d.value);
        });

      var areas = selection.selectAll('path.area')
        .data([
          {
            polarity: 'positive',
            values: years.map(function(year) {
              return {
                year: year,
                value: positiveYears[year] || 0
              };
            })
          },
          {
            polarity: 'negative',
            values: years.map(function(year) {
              return {
                year: year,
                value: negativeYears[year] || 0
              };
            })
          }
        ]);

      areas.exit().remove();
      areas.enter().append('path')
        .attr('class', function(d) {
          return 'area ' + d.polarity;
        });

      var zero = selection.select('g.zero');
      if (zero.empty()) {
        zero = selection.append('g')
          .attr('class', 'zero');
        zero.append('line');
        zero.append('text')
          .attr('class', 'label')
          .attr('text-anchor', 'end')
          .attr('dy', 0.5);
          // .text(0);
      }

      var mask = selection.select('g.mask');
      if (mask.empty()) {
        mask = selection.append('g')
          .attr('class', 'mask');
        mask.append('rect')
          .attr('class', 'before')
          .attr('x', 0)
          .attr('width', 0)
          .attr('height', h);
        mask.append('rect')
          .attr('class', 'after')
          .attr('x', w)
          .attr('width', w)
          .attr('height', h);
        mask.append('line')
          .attr('class', 'before')
          .attr('y1', 0)
          .attr('y2', h);
        mask.append('line')
          .attr('class', 'after')
          .attr('y1', 0)
          .attr('y2', h);
      }

      var updated = selection.property('updated');
      var t = function(d) {
        return d;
      };
      if (updated) {
        t = function(d) {
          return d.transition()
            .duration(500);
        };
      }

      var year1 = selected || years[years.length - 1];
      var year2 = year1 + 1;

      var beforeX = x(year1);
      var afterX = Math.min(x(year2), w);
      // don't transition these
      mask.select('rect.before')
        .attr('width', beforeX);
      mask.select('rect.after')
        .attr('x', afterX);
      mask.select('line.before')
        .attr('transform', 'translate(' + [beforeX, 0] + ')');
      mask.select('line.after')
        .attr('transform', 'translate(' + [afterX, 0] + ')');

      // transition these
      // mask = t(mask);
      mask.selectAll('line')
        .attr('y1', y(positiveYears[year1] || 0))
        .attr('y2', y(negativeYears[year1] || 0));

      zero.select('line')
        .attr('x1', left)
        .attr('x2', right);

      zero.select('.label')
        .attr('transform', 'translate(' + [left, 0] + ')');

      t(zero).attr('transform', 'translate(' + [0, y(0)] + ')');

      t(areas).attr('d', function(d) {
        return area(d.values);
      });
      selection.property('updated', true);
    };

    timeline.selected = function(year) {
      if (arguments.length) {
        selected = year;
        return timeline;
      }
      return selected;
    };

    timeline.years = function(list) {
      if (arguments.length) {
        years = list;
        return timeline;
      }
      return years;
    };

    timeline.value = function(fn) {
      if (arguments.length) {
        value = fn || identity;
        return timeline;
      }
      return value;
    };

    timeline.aggregate = function(fn) {
      if (arguments.length) {
        aggregate = fn;
        return timeline;
      }
      return aggregate;
    };

    return timeline;
  };

  function identity(d) {
    return d;
  }

})(eiti);


/***/ })

/******/ });
//# sourceMappingURL=company-revenue.min.js.map