/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ({

/***/ 41:
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./js/src/homepage.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

(function() {
  'use strict';

  __webpack_require__(/*! ./../components/aria-tabs.js */ 5);
  __webpack_require__(/*! ./../components/eiti-tooltip-wrapper.js */ 6);

})();


/***/ }),

/***/ 5:
/* unknown exports provided */
/* all exports used */
/*!************************************!*\
  !*** ./js/components/aria-tabs.js ***!
  \************************************/
/***/ (function(module, exports) {

$( document ).ready(function() {
// ARIA Tab Interface
// Thanks to Practical ARIA Examples
// http://heydonworks.com/practical_aria_examples/#tab-interface

// The class for the container div

var $container = '.tab-interface';

// The setup

$($container +' ul').attr('role','tablist');
$($container +' [role="tablist"] li').attr('role','presentation');
$('[role="tablist"] a').attr({
    'role' : 'tab',
    'tabindex' : '-1'
});

// Make each aria-controls correspond id of targeted section (re href)

$('[role="tablist"] a').each(function() {
  $(this).attr(
    'aria-controls', $(this).attr('href').substring(1)
  );
});

// Make the first tab selected by default and allow it focus

$('[role="tablist"] li:first-child a').attr({
    'aria-selected' : 'true',
    'tabindex' : '0'
});

// Make each section focusable and give it the tabpanel role

$($container +' section').attr({
  'role' : 'tabpanel'
});

// Make first child of each panel focusable programmatically

$($container +' section > *:first-child').attr({
    'tabindex' : '0'
});

// Make all but the first section hidden (ARIA state and display CSS)

$('[role="tabpanel"]:not(:first-of-type)').attr({
  'aria-hidden' : 'true'
});

// Change focus between tabs with arrow keys

$('[role="tab"]').on('keydown', function(e) {

  // define current, previous and next (possible) tabs

  var $original = $(this);
  var $prev = $(this).parents('li').prev().children('[role="tab"]');
  var $next = $(this).parents('li').next().children('[role="tab"]');
  var $target;

  // find the direction (prev or next)

  switch (e.keyCode) {
    case 37:
      $target = $prev;
      break;
    case 39:
      $target = $next;
      break;
    default:
      $target = false
      break;
  }

  if ($target.length) {
      $original.attr({
        'tabindex' : '-1',
        'aria-selected' : null
      });
      $target.attr({
        'tabindex' : '0',
        'aria-selected' : true
      }).focus();
  }

  // Hide panels

  $($container +' [role="tabpanel"]')
    .attr('aria-hidden', 'true');

  // Show panel which corresponds to target

  $('#' + $(document.activeElement).attr('href').substring(1))
    .attr('aria-hidden', null);

});

// Handle click on tab to show + focus tabpanel

$('[role="tab"]').on('click', function(e) {

  e.preventDefault();

  // remove focusability [sic] and aria-selected

  $('[role="tab"]').attr({
    'tabindex': '-1',
    'aria-selected' : null
    });

  // replace above on clicked tab

  $(this).attr({
    'aria-selected' : true,
    'tabindex' : '0'
  });

  // Hide panels

  $($container +' [role="tabpanel"]').attr('aria-hidden', 'true');

  // show corresponding panel

  $('#' + $(this).attr('href').substring(1))
    .attr('aria-hidden', null);

});

});


/***/ }),

/***/ 6:
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./js/components/eiti-tooltip-wrapper.js ***!
  \***********************************************/
/***/ (function(module, exports) {

/* jshint node: true, browser: true */
(function(exports) {
  'use strict';

  var CURSOR_OFFSET = 2;

  var depixelize = function(value) {
    if (value.match(/px$/)) {
      return Number(value.substr(0, value.length - 2));
    } else {
      return value;
    }
  };

  var pixelize = function(value) {
    return value + 'px';
  };

  var show = function() {
    this.attr('aria-hidden', false);
  };

  var hide = function() {
    this.attr('aria-hidden', true);
  };

  var attached = function() {
    var self = d3.select(this);
    var svg = self.select('svg');
    var titles = self.selectAll('title');
    var tiles = self.selectAll('use');
    var tooltipStyle = self.attr('tooltip-style');
    CURSOR_OFFSET = Number(self.attr('cursor-offset'))
      || CURSOR_OFFSET;

    var tooltip;
    var tooltipText;

    var init = function() {
      tooltip = self.select('.eiti-tooltip');

      if (tooltip.empty()) {
        tooltip = self.append('div')
          .classed('eiti-tooltip', true);
      }

      if (tooltipStyle) {
        tooltip.classed(tooltipStyle, true);
      }

      tooltip.call(hide);

      tooltipText = tooltip.select('p');

      if (tooltipText.empty()) {
        tooltipText = tooltip.append('p');
      }

      // if <title> tags do not have 'desc' or 'alt' attributes
      // use text instead
      titles
        .attr('desc', function() {
          var self = d3.select(this);
          return self.attr('desc') || self.text();
        })
        .attr('alt', function() {
          var self = d3.select(this);
          return self.attr('alt') || self.text();
        })
        // clear <title> text
        // if no javascript runs, <title> will serve as the tooltip
        // otherwise, clear it so that it doesn't interfere with
        // this tooltip
        .text('');
    };

    var update = function() {
      var event = event || d3.event || window.event;
      var elem = event.target || event.srcElement;
      var parentElement = d3.select(elem.parentElement);
      var title = parentElement.select('title');

      init();

      if (!title.empty()) {
        tooltipText.text(function() {
          return title.attr('desc');
        });

        // before rendering the tooltip, ensure that there is text
        if (tooltipText.text()) {
          tooltip
          .call(show)
          .attr('aria-label', function() {
            return title.attr('alt');
          })
          .style('left', function() {
            var tooltipWidth = depixelize(tooltip.style('width'));
            var svgWidth = depixelize(svg.style('width'));

            var x = event.layerX + CURSOR_OFFSET;

            if (svgWidth <= tooltipWidth + x) {
              return pixelize(event.layerX - tooltipWidth - CURSOR_OFFSET);
            } else if (x < 0) {
              return pixelize(event.layerX + tooltipWidth + CURSOR_OFFSET);
            } else {
              return pixelize(x);
            }
          })
          .style('top', function() {
            var tooltipHeight = depixelize(tooltip.style('height'));
            var svgHeight = depixelize(svg.style('height'));

            var y = event.layerY + CURSOR_OFFSET;

            if (svgHeight <= tooltipHeight + y) {
              return pixelize(event.layerY - tooltipHeight - CURSOR_OFFSET);
            } else if (y < 0) {
              return pixelize(event.layerY + tooltipHeight + CURSOR_OFFSET);
            } else {
              return pixelize(y);
            }
          });
        }
      }

    };

    var mouseout = function() {
      var event = event || d3.event || window.event;
      var elem = event.target || event.srcElement;
      if (elem.nodeName.toLowerCase() === 'svg') {
        self.select('.eiti-tooltip')
          .call(hide);
      }
    };

    init(this);

    tiles.on('mouseover', update);
    svg.on('mouseout', mouseout);
  };

  var detached = function() { };

  exports.EITITooltipWrapper = document.registerElement(
    'eiti-tooltip-wrapper',
    {
      extends: 'div',
      prototype: Object.create(
        HTMLElement.prototype,
        {
          attachedCallback: {value: attached},
          detachdCallback: {value: detached}
        }
      )
    }
  );

})(this);


/***/ })

/******/ });
//# sourceMappingURL=homepage.min.js.map