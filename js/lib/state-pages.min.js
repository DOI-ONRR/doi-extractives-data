/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	(function(exports) {
	  'use strict';

	  __webpack_require__(24);
	  __webpack_require__(25);

	  __webpack_require__(4);
	  __webpack_require__(1);

	  var OpenListNav = __webpack_require__(23);

	  // exporting instance of OpenListNav because openListNav is
	  // referenced in the markup:
	  // _includes/hash_selecor.html
	  exports.openListNav = new OpenListNav();

	})(window);



/***/ },

/***/ 1:
/***/ function(module, exports) {

	(function(exports) {

	  var scrollLeft,
	    scrollTop;

	  var findScrollPositions = function(){
	    scrollLeft = (window.pageXOffset !== undefined)
	      ? window.pageXOffset
	      : (document.documentElement
	        || document.body.parentNode
	        || document.body).scrollLeft;
	    scrollTop = (window.pageYOffset !== undefined)
	      ? window.pageYOffset
	      : (document.documentElement
	        || document.body.parentNode
	        || document.body).scrollTop;

	  };

	  var StickyNav = function() {

	    this.elems = {
	      sticky : document.querySelector('.sticky_nav'),
	      main: document.querySelector('main')
	    };

	    this.attrStickyOffset = this.elems.sticky.getAttribute('data-sticky-offset');
	    this.attrOffsetBottom = parseInt(this.elems.sticky.getAttribute('data-offset-bottom')) || 0;
	    this.maxWidth = this.elems.sticky.getAttribute('data-max-width');
	    var attrAbsolute = this.elems.sticky.getAttribute('data-absolute');

	    this.attrParent = this.elems.sticky.getAttribute('data-offset-parent');

	    this.elems.parent = this.elems.sticky.getAttribute('data-offset-parent')
	      ? this.elems.sticky.parentNode
	      : null;

	    this.determineScreen = function() {
	      var windowWidth = window.innerWidth || document.body.clientWidth;
	      this.wasMobile = this.isMobile;
	      this.isMobile = windowWidth < 768;
	    };

	    this.determineScreen();

	    this.isAbsolute = function() {

	      var isAbsolute = (attrAbsolute === 'true' && !this.isMobile)
	        ? true
	        : false;
	      return isAbsolute;
	    }




	    this.status;
	    this.lastStatus;
	    this.lastWidth;
	    this.lastWindowWidth;
	  };

	  StickyNav.prototype = {
	    setOffset: function () {
	      this.offset = this.attrStickyOffset
	        ? parseInt(this.attrStickyOffset)
	        : !this.elems.parent
	          ? this.elems.sticky.offsetTop
	          : ( this.attrParent === 'mobile' && this.isMobile )
	            ? this.elems.parent.offsetTop - this.elems.sticky.offsetHeight
	            : this.elems.sticky.offsetTop
	    },
	    getPositions: function () {

	      this.height = this.elems.sticky.clientHeight;

	      this.lastWidth = this.width || 'initial';
	      var windowWidth = window.innerWidth || document.body.clientWidth,
	        windowBump = windowWidth > 1044 || this.isMobile ? 0 : -20;
	      this.width = this.elems.parent
	        ? this.elems.parent.clientWidth + windowBump + 'px'
	        : this.maxWidth;

	      this.mainOffset = this.elems.main.offsetTop;
	      this.mainHeight = this.elems.main.clientHeight;

	      this.diffTop = scrollTop - this.mainOffset - this.offset;

	      this.diffBottom = scrollTop + this.height - this.mainHeight - this.mainOffset;
	      this.lastStatus = this.status;
	      if (this.diffTop >= 0){
	        this.status = 'fixed';
	        if (this.diffBottom >= 0){
	          this.status = 'absolute';
	        }
	      } else {
	        this.status = 'static';
	      }
	    },
	    needsUpdate: function(init) {
	      var statusChange = this.status !== this.lastStatus;
	      var sizeChange = this.width !== this.lastWidth;
	      var updateNeeded = undefined;
	      if (!statusChange && sizeChange) {
	        updateNeeded = 'size';
	      } else if (statusChange && !sizeChange) {
	        updateNeeded = 'status';
	      } else if (statusChange && sizeChange || init === 'init') {
	        updateNeeded = 'both';
	      }
	      return updateNeeded;
	    },
	    update: function(updateNeeded) {
	      if (!updateNeeded) {
	        return;
	      } else {
	        if (this.diffTop >= 0){
	          if (updateNeeded === 'status' || updateNeeded === 'both') {
	            this.elems.sticky.style.position = 'fixed';
	            this.elems.sticky.style.top = 0;
	            this.elems.sticky.classList.remove('js-transparent');
	            this.elems.sticky.classList.add('js-color');
	          }

	          if (updateNeeded === 'size' || updateNeeded === 'both') {
	            this.elems.sticky.style.width = this.width;
	          }

	          if (this.diffBottom >= 0){
	            if (updateNeeded === 'status' || updateNeeded === 'both') {
	              this.elems.sticky.style.position = 'absolute';

	              if ( this.attrParent === 'mobile' && this.isMobile ) {
	                this.elems.sticky.style.top = this.mainHeight - this.offset - this.height - this.attrOffsetBottom + 'px';
	              } else {
	                this.elems.sticky.style.top = this.mainHeight - this.height - this.attrOffsetBottom + 'px';
	              }
	            }
	          }
	        } else {
	          if (updateNeeded === 'status' || updateNeeded === 'both') {
	            this.elems.sticky.classList.remove('js-color');
	            this.elems.sticky.classList.add('js-transparent');
	            if (this.isAbsolute()) {
	              this.elems.sticky.style.position = 'absolute';
	            } else {
	              this.elems.sticky.style.position = 'static';
	            }
	          }

	          if (updateNeeded === 'size' || updateNeeded === 'both') {
	            this.elems.sticky.style.width = this.width;
	          }
	        }
	      }
	    },
	    throttle : function (fn, threshhold, scope) {
	      threshhold || (threshhold = 250);
	      var last,
	          deferTimer;
	      return function () {
	        var context = scope || this;

	        var now = +new Date,
	            args = arguments;
	        if (last && now < last + threshhold) {
	          // hold on to it
	          clearTimeout(deferTimer);
	          deferTimer = setTimeout(function () {
	            last = now;
	            fn.apply(context, args);
	          }, threshhold);
	        } else {
	          last = now;
	          fn.apply(context, args);
	        }
	      };
	    },
	    run: function(init) {
	      findScrollPositions();
	      if (init === 'init') {
	        this.setOffset();
	      }
	      this.getPositions();
	      this.update(this.needsUpdate(init));
	    }
	  };

	  var stickyNav = new StickyNav();

	  var loadDelay = stickyNav.elems.sticky.getAttribute('data-load-delay');
	  if (loadDelay) {
	    setTimeout(function() {
	      stickyNav.run('init');
	    }, parseInt(loadDelay));
	  } else {
	    stickyNav.run('init');
	  }



	  window.addEventListener('scroll', stickyNav.throttle(stickyNav.run, 130, stickyNav));

	  window.addEventListener('resize', stickyNav.throttle(stickyNav.run, 150, stickyNav));

	  // documentation: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
	  var observer = new MutationObserver(function () {
	    stickyNav.run();
	  });

	  // set up your configuration
	  // this will watch to see if you insert or remove any children
	  var config = { subtree: true, childList: true };

	  // start observing
	  observer.observe(stickyNav.elems.sticky, config);

	  // other potential elem listener
	  // http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/

	  exports.stickyNav = stickyNav;


	})(this);


/***/ },

/***/ 4:
/***/ function(module, exports) {

	$( document ).ready(function() {
	// ARIA Tab Interface
	// Thanks to Practical ARIA Examples
	// http://heydonworks.com/practical_aria_examples/#tab-interface

	// The class for the container div

	var $container = '.tab-interface';

	// The setup

	$($container +' ul').attr('role','tablist');
	$($container +' [role="tablist"] li').attr('role','presentation');
	$('[role="tablist"] a').attr({
	    'role' : 'tab',
	    'tabindex' : '-1'
	});

	// Make each aria-controls correspond id of targeted section (re href)

	$('[role="tablist"] a').each(function() {
	  $(this).attr(
	    'aria-controls', $(this).attr('href').substring(1)
	  );
	});

	// Make the first tab selected by default and allow it focus

	$('[role="tablist"] li:first-child a').attr({
	    'aria-selected' : 'true',
	    'tabindex' : '0'
	});

	// Make each section focusable and give it the tabpanel role

	$($container +' section').attr({
	  'role' : 'tabpanel'
	});

	// Make first child of each panel focusable programmatically

	$($container +' section > *:first-child').attr({
	    'tabindex' : '0'
	});

	// Make all but the first section hidden (ARIA state and display CSS)

	$('[role="tabpanel"]:not(:first-of-type)').attr({
	  'aria-hidden' : 'true'
	});

	// Change focus between tabs with arrow keys

	$('[role="tab"]').on('keydown', function(e) {

	  // define current, previous and next (possible) tabs

	  var $original = $(this);
	  var $prev = $(this).parents('li').prev().children('[role="tab"]');
	  var $next = $(this).parents('li').next().children('[role="tab"]');
	  var $target;

	  // find the direction (prev or next)

	  switch (e.keyCode) {
	    case 37:
	      $target = $prev;
	      break;
	    case 39:
	      $target = $next;
	      break;
	    default:
	      $target = false
	      break;
	  }

	  if ($target.length) {
	      $original.attr({
	        'tabindex' : '-1',
	        'aria-selected' : null
	      });
	      $target.attr({
	        'tabindex' : '0',
	        'aria-selected' : true
	      }).focus();
	  }

	  // Hide panels

	  $($container +' [role="tabpanel"]')
	    .attr('aria-hidden', 'true');

	  // Show panel which corresponds to target

	  $('#' + $(document.activeElement).attr('href').substring(1))
	    .attr('aria-hidden', null);

	});

	// Handle click on tab to show + focus tabpanel

	$('[role="tab"]').on('click', function(e) {

	  e.preventDefault();

	  // remove focusability [sic] and aria-selected

	  $('[role="tab"]').attr({
	    'tabindex': '-1',
	    'aria-selected' : null
	    });

	  // replace above on clicked tab

	  $(this).attr({
	    'aria-selected' : true,
	    'tabindex' : '0'
	  });

	  // Hide panels

	  $($container +' [role="tabpanel"]').attr('aria-hidden', 'true');

	  // show corresponding panel

	  $('#' + $(this).attr('href').substring(1))
	    .attr('aria-hidden', null);

	});

	});


/***/ },

/***/ 23:
/***/ function(module, exports) {

	(function(exports) {
	    function getScrollTop() {
	      return (window.pageYOffset !== undefined)
	        ? window.pageYOffset
	        : (document.documentElement
	          || document.body.parentNode
	          || document.body).scrollTop;
	    }

	    function isElementInViewport(el) {
	      var rect = el.getBoundingClientRect();

	      return rect.bottom > 0 &&
	          rect.right > 0 &&
	          rect.left < (window.innerWidth || document. documentElement.clientWidth) &&
	          rect.top < (window.innerHeight || document. documentElement.clientHeight);
	    }

	    exports.OpenListNav = function() {
	      // init OpenListNav Properties
	      this.active = window.location.hash || '#intro';
	      this.navItems = document.querySelectorAll('[data-nav-item]');
	      this.navSelect = $('[data-nav-options]');
	      this.navIsSelect = !!this.navSelect.length;
	      this.navHeaders = document.querySelectorAll('[data-nav-header]');
	      this.scrollTop = {
	        current: getScrollTop(),
	        prev: getScrollTop(),
	        direction: 'down'
	      };

	      this.registerEventHandlers();
	    };

	    exports.OpenListNav.prototype = {
	      updateScrollTop: function() {
	        this.scrollTop.prev = this.scrollTop.current;
	        this.scrollTop.current = getScrollTop();
	        this.scrollTop.direction = (this.scrollTop.current >= this.scrollTop.prev)
	          ? 'down'
	          : 'up';
	      },

	      removeActive: function(){
	        this.active = null;
	        for (var i = 0; i < this.navItems.length; i++) {
	          this.navItems[i].setAttribute('data-active', false);
	        }
	      },

	      addActive: function(el, name){
	        if (!el){
	          el = document.querySelector('[data-nav-item="' + name + '"]');
	          this.active = name;
	          el.setAttribute('data-active', true);
	        } else {
	          this.active = el.getAttribute('data-nav-item');
	          el.setAttribute('data-active', true);
	        }
	      },

	      update: function(el, name){
	        this.removeActive();
	        this.addActive(el, name);
	      },

	      updateSelectField: function(newValue) {
	        if (newValue){
	          this.navSelect.val(newValue);
	        }
	      },

	      registerEventHandlers: function(){
	        var self = this;
	        if (!this.navIsSelect) {
	          for (var i = 0; i < this.navItems.length; i++) {
	            var item = this.navItems[i];
	            item.addEventListener('click', function () {
	              self.update(this);
	            });
	          }
	        }

	        window.addEventListener('scroll', function() {
	          self.updateScrollTop();
	          // TODO: throttle
	          self.detectNavChange();
	        });

	        window.addEventListener('resize', function(){
	          // TODO: throttle
	          self.detectNavChange();
	        });

	      },

	      changeHandler: function(selector) {
	        window.location.hash = selector.value;
	      },


	      detectNavChange: function(){

	        var self = this;

	        // initialize nav status as not updated
	        var updated = false;

	         Array.prototype.forEach.call(this.navHeaders, function(header){
	           var inViewPort = isElementInViewport(header);
	           if (inViewPort && !self.navIsSelect && !updated) {
	              var newName = header.name || header.id;
	              self.update(null, newName);
	              updated = true;
	           } else if(inViewPort && self.navIsSelect && !updated) {
	             var newName = header.name || header.id;
	            self.updateSelectField(newName);
	             updated = true;
	           }
	        });
	      }
	    };

	    module.exports = exports.OpenListNav;
	  })(this);


/***/ },

/***/ 24:
/***/ function(module, exports) {

	(function(exports) {

	  var initialize = function() {
	    this._cells = [].slice.call(this.querySelectorAll('tr > [data-value]'));
	    this.update();
	  };

	  var update = function() {
	    if (!this._cells.length) {
	      return;
	    }

	    var series = {};
	    var autolabel = this.getAttribute('autolabel') === 'true';

	    this._cells.forEach(function(cell) {
	      var key = cell.dataset.series || 'default';
	      if (key in series) {
	        series[key].push(cell);
	      } else {
	        series[key] = [cell];
	      }
	    });

	    Object.keys(series).forEach(function(key) {
	      var cells = series[key];
	      var values = cells.map(function(cell) {
	        return +cell.dataset.value;
	      });

	      var extent = d3.extent(values);
	      if (this.hasAttribute('data-' + key + '-min')) {
	        extent[0] = +this.dataset[key + 'Min'];
	      } else if (this.hasAttribute('data-min')) {
	        extent[0] = +this.dataset.min;
	      } else {
	        extent[0] = Math.min(extent[0], 0);
	      }

	      if (this.hasAttribute('data-' + key + '-max')) {
	        extent[1] = +this.dataset[key + 'Max'];
	      } else if (this.hasAttribute('data-max')) {
	        extent[1] = +this.dataset.max;
	      }

	      var range = [0, 100];
	      var min = extent[0];
	      var max = extent[1];
	      var negative = min < 0;
	      var zero = 0;
	      var width = d3.scale.linear()
	        .domain(extent)
	        .range(range)
	        .clamp(true);

	      var offset;
	      var sizeProperty = 'width';
	      var offsetProperty = 'margin-left';

	      if (negative) {
	        var length = max - min;
	        zero = 100 * (0 - min) / length;
	        offset = d3.scale.linear()
	          .domain([min, 0, max])
	          .range([0, zero, zero])
	          .clamp(true);
	        width = d3.scale.linear()
	          .domain([min, 0, max])
	          .range([100 * -min / length, 0, 100 * max / length])
	          .clamp(true);
	      }

	      if (this.orient === 'vertical') {
	        sizeProperty = 'height';
	        offsetProperty = 'bottom';
	      }

	      cells.forEach(function(cell, i) {
	        if (!cell) {
	          console.warn('no cell @', i);
	          return;
	        }

	        // TODO only do this if autolabel="true"?
	        if (cell.childNodes.length === 1 && cell.firstChild.nodeType === Node.TEXT_NODE) {
	          if (autolabel) {
	            cell.setAttribute('aria-label', cell.firstChild.textContent);
	            cell.removeChild(cell.firstChild);
	          } else {
	            var text = cell.removeChild(cell.firstChild);
	            var span = cell.appendChild(document.createElement('span'));
	            span.className = 'text';
	            span.appendChild(text);
	          }
	        }

	        var bar = cell.querySelector('.bar');
	        if (!bar) {
	          bar = document.createElement('div');
	          bar.className = 'bar';
	          cell.appendChild(bar);
	        }

	        var value = +cell.dataset.value;
	        var size = width(value);
	        bar.style.setProperty(sizeProperty, Math.abs(size) + '%');
	        if (offset) {
	          bar.style.setProperty(offsetProperty, offset(value) + '%');
	        } else {
	          bar.style.removeProperty(offsetProperty);
	        }
	      });

	    }, this);
	  };

	  exports.EITIBarChartTable = document.registerElement('bar-chart-table', {
	    'extends': 'table',
	    prototype: Object.create(
	      HTMLTableElement.prototype,
	      {
	        attachedCallback: {value: initialize},

	        attributeChangedCallback: {value: function(attr, old, value) {
	          switch (attr) {
	            case 'orient':
	              this.update();
	          }
	        }},

	        update: {value: update},

	        orient: {
	          get: function() {
	            return this.getAttribute('orient');
	          },
	          set: function(value) {
	            if (value !== this.orient) {
	              this.setAttribute('orient', value);
	            }
	          }
	        }
	      }
	    )
	  });

	})(this);


/***/ },

/***/ 25:
/***/ function(module, exports) {

	(function(exports) {

	  exports.EITIDataMap = document.registerElement('data-map', {
	    prototype: Object.create(
	      HTMLElement.prototype,
	      {
	        attachedCallback: {value: function() {
	          this.update();
	        }},

	        update: {value: function() {
	          var type = this.getAttribute('scale-type') || 'quantize';
	          var scheme = this.getAttribute('color-scheme') || 'Blues';
	          var steps = this.getAttribute('steps') || 5;
	          var colors = colorbrewer[scheme][steps];
	          if (!colors) {
	            return console.error(
	              'bad # of steps (%d) for color scheme:', steps, scheme
	            );
	          }

	          var marks = d3.select(this)
	            .selectAll('svg [data-value]')
	            .datum(function() {
	              return +this.getAttribute('data-value') || 0;
	            });

	          var domain = this.hasAttribute('domain')
	            ? JSON.parse(this.getAttribute('domain'))
	            : d3.extent(marks.data());

	          if (domain[0] > 0) {
	            domain[0] = 0;
	          } else if (domain[0] < 0) {
	            domain[1] = Math.max(0, domain[1]);
	          }

	          // FIXME: do something with divergent scales??

	          var scale = d3.scale[type]()
	            .domain(domain)
	            .range(colors);

	          marks.attr('fill', scale);
	        }}
	      }
	    )
	  });

	})(this);


/***/ }

/******/ });